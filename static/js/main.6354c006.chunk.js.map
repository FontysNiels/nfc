{"version":3,"sources":["nfc.svg","spinner.gif","contexts/context.js","components/Scanner/Scanner.js","containers/Scan.js","App.js","reportWebVitals.js","index.js"],"names":["ActionsContext","createContext","scan","write","setActions","Scanner","useContext","actions","className","onClick","src","Spinner","alt","Scan","useCallback","a","window","console","log","useEffect","status","App","useState","actionsValue","onHandleAction","nfc","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,MAA0B,gC,+BCA1B,G,MAAA,IAA0B,qCCE5BA,EAAiBC,wBAC1B,CACIC,KAAM,KACNC,MAAO,KACPC,WAAW,e,OCcJC,EAfC,WAAO,IAAD,EACWC,qBAAWN,GAAlCO,EADY,EACZA,QAASH,EADG,EACHA,WACf,OACE,sBAAKI,UAAU,UAAf,UACE,mBAAGA,UAAU,eAAeC,QAAS,kBAAIL,EAAW,2BAAIG,GAAL,IAAcL,KAAM,SAAvE,eACA,sBAAKM,UAAU,oBAAf,UACE,qBAAKE,IAAKC,EAASC,IAAI,eAAeJ,UAAU,kBAChD,mBAAGA,UAAU,eAAb,gCCuBKK,EA/BF,WAAO,IAAD,EACiBP,qBAAWN,GAAnCO,EADO,EACPA,QAASH,EADF,EACEA,WAEXF,EAAOY,sBAAW,sBAAC,sBAAAC,EAAA,sDACjB,eAAgBC,SAChBC,QAAQC,IAAI,UAEZd,EAAW,CACPF,KAAM,aALO,2CAStB,CAACE,IAQJ,OALAe,qBAAU,WACNjB,MACD,CAACA,IAIA,mCACsB,YAAjBK,EAAQL,KACL,8BACI,0CAEF,cAAC,EAAD,CAASkB,OAAQb,EAAQL,UCI5BmB,MA5Bf,WAAgB,IAAD,EAEiBC,mBAAS,MAF1B,mBAENf,EAFM,KAEGH,EAFH,OAGSG,GAAW,GAA1BL,EAHM,EAGNA,KAEDqB,GALO,EAGApB,MAEQ,CAACI,UAAQH,eAExBoB,EAAiB,SAACjB,GACtBH,EAAW,eAAIG,KAGjB,OACI,sBAAKC,UAAU,MAAf,UACE,qBAAKE,IAAKe,EAAKjB,UAAU,WAAWI,IAAI,SACxC,0CACA,sBAAKJ,UAAU,gBAAf,UACE,wBAAQC,QAAS,kBAAIe,EAAe,CAACtB,KAAM,cAAcM,UAAU,MAAnE,kBACA,wBAAQC,QAAS,kBAAIe,EAAe,CAACtB,KAAM,QAAQM,UAAU,MAA7D,sBAEF,8CACA,cAACR,EAAe0B,SAAhB,CAAyBC,MAAOJ,EAAhC,SACGrB,GAAQ,cAAC,EAAD,UCfJ0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6354c006.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nfc.1e1c9c72.svg\";","export default __webpack_public_path__ + \"static/media/spinner.e8697d57.gif\";","import { createContext } from \"react\";\n\nexport const ActionsContext = createContext(\n    {\n        scan: null,\n        write: null,\n        setActions:()=>{}\n    }\n);","import React, { useContext } from 'react';\nimport './Scanner.css'\nimport Spinner from '../../spinner.gif';\nimport { ActionsContext } from '../../contexts/context';\n\nconst Scanner = () => {\n  const { actions, setActions} = useContext(ActionsContext);\n    return (\n      <div className=\"scanner\">\n        <p className=\"scanner-exit\" onClick={()=>setActions({...actions, scan: null})}>X</p>\n        <div className=\"scanner-container\">\n          <img src={Spinner} alt=\"spinning log\" className=\"scanner-image\"/>\n          <p className=\"scanner-text\">\n            Scanning...\n          </p>\n        </div>\n      </div>\n    );\n};\n\nexport default Scanner;","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport Scanner from '../components/Scanner/Scanner';\nimport { ActionsContext } from '../contexts/context';\n\nconst Scan = () => {\n    const { actions, setActions } = useContext(ActionsContext);\n\n    const scan = useCallback(async () => {\n        if ('NDEFReader' in window) {\n            console.log(\"got it\")\n\n            setActions({\n                scan: 'scanned',\n            });\n\n        }\n    }, [setActions]);\n\n\n    useEffect(() => {\n        scan();\n    }, [scan]);\n\n\n    return (\n        <>\n            {actions.scan === 'scanned' ?\n                <div>\n                    <p>Scanned</p>\n                </div>\n                : <Scanner status={actions.scan}></Scanner>}\n        </>\n    );\n};\n\nexport default Scan;","import nfc from './nfc.svg';\nimport './App.css';\nimport Scan from './containers/Scan';\nimport { useState } from 'react';\nimport { ActionsContext } from './contexts/context';\n\nfunction App() {\n\n  const [actions, setActions] = useState(null);\n  const {scan, write} = actions || {};\n\n  const actionsValue = {actions,setActions};\n\n  const onHandleAction = (actions) =>{\n    setActions({...actions});\n  }\n\n  return (\n      <div className=\"App\">\n        <img src={nfc} className=\"App-logo\" alt=\"logo\" />\n        <h1>NFC Tool</h1>\n        <div className=\"App-container\">\n          <button onClick={()=>onHandleAction({scan: 'scanning'})} className=\"btn\">Scan</button>\n          <button onClick={()=>onHandleAction({scan: null})} className=\"btn\">Write</button>\n        </div>\n        <p>Version Less.</p>\n        <ActionsContext.Provider value={actionsValue}>\n          {scan && <Scan/>}\n\n        </ActionsContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}