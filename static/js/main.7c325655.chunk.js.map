{"version":3,"sources":["nfc.svg","spinner.gif","contexts/context.js","components/Scanner/Scanner.js","containers/Scan.js","components/SVGs/save.js","components/Writer/Writer.js","containers/Write.js","App.js","reportWebVitals.js","index.js"],"names":["ActionsContext","createContext","scan","write","setActions","Scanner","useContext","actions","className","onClick","src","Spinner","alt","Scan","useState","message","setMessage","data","setData","serialNumber","setSerialNumber","useCallback","a","window","ndef","NDEFReader","console","log","onreadingerror","onreading","event","onReading","records","record","recordType","textDecoder","TextDecoder","encoding","decode","useEffect","status","Save","xmlns","height","viewBox","width","fill","d","Writer","writeFn","React","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Write","onWrite","alert","App","actionsValue","onHandleAction","nfc","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c325655.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nfc.1e1c9c72.svg\";","export default __webpack_public_path__ + \"static/media/spinner.e8697d57.gif\";","import { createContext } from \"react\";\n\nexport const ActionsContext = createContext(\n    {\n        scan: null,\n        write: null,\n        setActions:()=>{}\n    }\n);","import React, { useContext } from 'react';\nimport './Scanner.css'\nimport Spinner from '../../spinner.gif';\nimport { ActionsContext } from '../../contexts/context';\n\nconst Scanner = () => {\n  const { actions, setActions} = useContext(ActionsContext);\n    return (\n      <div className=\"scanner\">\n        <p className=\"scanner-exit\" onClick={()=>setActions({...actions, scan: null})}>X</p>\n        <div className=\"scanner-container\">\n          <img src={Spinner} alt=\"spinning log\" className=\"scanner-image\"/>\n          <p className=\"scanner-text\">\n            Scanning...\n          </p>\n        </div>\n      </div>\n    );\n};\n\nexport default Scanner;","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport Scanner from '../components/Scanner/Scanner';\nimport { ActionsContext } from '../contexts/context';\n\nconst Scan = () => {\n    const [message, setMessage] = useState('');\n    const [data, setData] = useState('');\n    const [serialNumber, setSerialNumber] = useState('');\n    const { actions, setActions} = useContext(ActionsContext);\n\n    const scan = useCallback(async() => {\n        if ('NDEFReader' in window) { \n            try {\n                const ndef = new window.NDEFReader();\n                await ndef.scan();\n                \n                console.log(\"Scan started successfully.\");\n                ndef.onreadingerror = () => {\n                    console.log(\"Cannot read data from the NFC tag. Try another one?\");\n                };\n                \n                ndef.onreading = event => {\n                    console.log(\"NDEF message read.\");\n                    onReading(event);\n                    setData(event)\n                    setActions({\n                        scan: 'scanned',\n                        write: null\n                    });\n                };\n\n            } catch(error){\n                console.log(`Error! Scan failed to start: ${error}.`);\n            };\n        }\n    },[setActions]);\n\n    const onReading = ({message, serialNumber}) => {\n        setSerialNumber(serialNumber);\n        for (const record of message.records) {\n            switch (record.recordType) {\n                case \"text\":\n                    const textDecoder = new TextDecoder(record.encoding);\n                    setMessage(textDecoder.decode(record.data));\n                    break;\n                case \"url\":\n                    // TODO: Read URL record with record data.\n                    break;\n                default:\n                    // TODO: Handle other records with record data.\n                }\n        }\n    };\n\n    useEffect(() => {\n        scan();\n    }, [scan]);\n\n    console.log(\"v1.\")\n    return(\n        <>\n            {actions.scan === 'scanned' ?  \n            <div>\n                <p>Version 1.</p>\n                <p>Serial Number: {serialNumber}</p>\n                <p>Message: {message}</p>\n\n                <p>{data}</p>\n            </div>\n            : <Scanner status={actions.scan}></Scanner> }\n        </>\n    );\n};\n\nexport default Scan;","import React from 'react';\n\nconst Save = () =>(\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#FFFFFF\">\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm2 16H5V5h11.17L19 7.83V19zm-7-7c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zM6 6h9v4H6z\"/>\n    </svg>\n);\n\nexport default Save;","import React from 'react';\nimport './Writer.css';\nimport Save from '../SVGs/save';\n\nconst Writer = ({writeFn}) => {\n    const [message, setMessage] = React.useState('');\n\n    const onSave = (e) => {\n        e.preventDefault();\n        writeFn(message);\n        setMessage('');\n    };\n\n    return (\n      <>\n        <form onSubmit={onSave}>\n            <div className=\"writer-container\">\n                <input type=\"text\" placeholder=\"Enter Message...\" value={message} onChange={(e)=>setMessage(e.target.value)}></input>\n                <button className=\"btn\" type=\"submit\">\n                    <Save/>\n                    Save\n                </button>\n            </div>\n        </form>\n      </>\n    );\n};\n\nexport default Writer;","import React from 'react';\nimport Writer from '../components/Writer/Writer';\n\nconst Write = () => {\n    const onWrite = async(message) => {\n        try {\n            const ndef = new window.NDEFReader();\n            // This line will avoid showing the native NFC UI reader\n            await ndef.scan();\n            await ndef.write({records: [{ recordType: \"text\", data: message }]});\n            alert(`Value Saved!`);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    return (\n      <Writer writeFn={onWrite}/>\n    );\n};\n\nexport default Write;","import nfc from './nfc.svg';\nimport './App.css';\nimport Scan from './containers/Scan';\nimport Write from './containers/Write';\nimport { useState } from 'react';\nimport { ActionsContext } from './contexts/context';\n\nfunction App() {\n\n  const [actions, setActions] = useState(null);\n  const {scan, write} = actions || {};\n\n  const actionsValue = {actions,setActions};\n\n  const onHandleAction = (actions) =>{\n    setActions({...actions});\n  }\n\n  return (\n      <div className=\"App\">\n        <img src={nfc} className=\"App-logo\" alt=\"logo\" />\n        <h1>NFC Tool</h1>\n        <div className=\"App-container\">\n          <button onClick={()=>onHandleAction({scan: 'scanning', write: null})} className=\"btn\">Scan</button>\n          <button onClick={()=>onHandleAction({scan: null, write: 'writing'})} className=\"btn\">Write</button>\n        </div>\n        <ActionsContext.Provider value={actionsValue}>\n          {scan && <Scan/>}\n          {write && <Write/>}\n        </ActionsContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}