{"version":3,"sources":["nfc.svg","spinner.gif","contexts/context.js","components/Scanner/Scanner.js","containers/Scan.js","App.js","reportWebVitals.js","index.js"],"names":["ActionsContext","createContext","scan","write","setActions","Scanner","useContext","actions","className","onClick","src","Spinner","alt","Scan","useState","useCallback","a","window","console","log","ndef","NDEFReader","onreadingerror","onreading","event","useEffect","status","App","actionsValue","onHandleAction","nfc","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,MAA0B,gC,oCCA1B,G,MAAA,IAA0B,qCCE5BA,EAAiBC,wBAC1B,CACIC,KAAM,KACNC,MAAO,KACPC,WAAW,e,OCcJC,EAfC,WAAO,IAAD,EACWC,qBAAWN,GAAlCO,EADY,EACZA,QAASH,EADG,EACHA,WACf,OACE,sBAAKI,UAAU,UAAf,UACE,mBAAGA,UAAU,eAAeC,QAAS,kBAAIL,EAAW,2BAAIG,GAAL,IAAcL,KAAM,SAAvE,eACA,sBAAKM,UAAU,oBAAf,UACE,qBAAKE,IAAKC,EAASC,IAAI,eAAeJ,UAAU,kBAChD,mBAAGA,UAAU,eAAb,gCC6DKK,EArEF,WAAO,IAAD,EACeC,mBAAS,IADxB,gCAESA,mBAAS,KAFlB,gCAGyBA,mBAAS,KAHlC,gCAIiBR,qBAAWN,IAAnCO,EAJO,EAIPA,QAASH,EAJF,EAIEA,WAEXF,EAAOa,sBAAW,sBAAC,4BAAAC,EAAA,2DACjB,eAAgBC,QADC,wBAEjBC,QAAQC,IAAI,UAFK,SAKPC,EAAO,IAAIH,OAAOI,WALX,SAMPD,EAAKlB,OANE,OAQbgB,QAAQC,IAAI,8BACZC,EAAKE,eAAiB,WAClBJ,QAAQC,IAAI,wDAGhBC,EAAKG,UAAY,SAAAC,GACbpB,EAAW,CACPF,KAAM,aAfD,kDAqBbgB,QAAQC,IAAR,kDArBa,kEAwBtB,CAACf,IA4BJ,OALAqB,qBAAU,WACNvB,MACD,CAACA,IAIA,mCACsB,YAAjBK,EAAQL,KACL,8BACI,0CAEF,cAAC,EAAD,CAASwB,OAAQnB,EAAQL,UClC5ByB,MA5Bf,WAAgB,IAAD,EAEiBb,mBAAS,MAF1B,mBAENP,EAFM,KAEGH,EAFH,OAGSG,GAAW,GAA1BL,EAHM,EAGNA,KAED0B,GALO,EAGAzB,MAEQ,CAACI,UAAQH,eAExByB,EAAiB,SAACtB,GACtBH,EAAW,eAAIG,KAGjB,OACI,sBAAKC,UAAU,MAAf,UACE,qBAAKE,IAAKoB,EAAKtB,UAAU,WAAWI,IAAI,SACxC,0CACA,sBAAKJ,UAAU,gBAAf,UACE,wBAAQC,QAAS,kBAAIoB,EAAe,CAAC3B,KAAM,cAAcM,UAAU,MAAnE,kBACA,wBAAQC,QAAS,kBAAIoB,EAAe,CAAC3B,KAAM,QAAQM,UAAU,MAA7D,sBAEF,8CACA,cAACR,EAAe+B,SAAhB,CAAyBC,MAAOJ,EAAhC,SACG1B,GAAQ,cAAC,EAAD,UCfJ+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ea12122.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nfc.1e1c9c72.svg\";","export default __webpack_public_path__ + \"static/media/spinner.e8697d57.gif\";","import { createContext } from \"react\";\n\nexport const ActionsContext = createContext(\n    {\n        scan: null,\n        write: null,\n        setActions:()=>{}\n    }\n);","import React, { useContext } from 'react';\nimport './Scanner.css'\nimport Spinner from '../../spinner.gif';\nimport { ActionsContext } from '../../contexts/context';\n\nconst Scanner = () => {\n  const { actions, setActions} = useContext(ActionsContext);\n    return (\n      <div className=\"scanner\">\n        <p className=\"scanner-exit\" onClick={()=>setActions({...actions, scan: null})}>X</p>\n        <div className=\"scanner-container\">\n          <img src={Spinner} alt=\"spinning log\" className=\"scanner-image\"/>\n          <p className=\"scanner-text\">\n            Scanning...\n          </p>\n        </div>\n      </div>\n    );\n};\n\nexport default Scanner;","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport Scanner from '../components/Scanner/Scanner';\nimport { ActionsContext } from '../contexts/context';\n\nconst Scan = () => {\n    const [message, setMessage] = useState('');\n    const [data, setData] = useState('');\n    const [serialNumber, setSerialNumber] = useState('');\n    const { actions, setActions } = useContext(ActionsContext);\n\n    const scan = useCallback(async () => {\n        if ('NDEFReader' in window) {\n            console.log(\"got it\")\n\n            try {\n                const ndef = new window.NDEFReader();\n                await ndef.scan();\n\n                console.log(\"Scan started successfully.\");\n                ndef.onreadingerror = () => {\n                    console.log(\"Cannot read data from the NFC tag. Try another one?\");\n                };\n\n                ndef.onreading = event => {\n                    setActions({\n                        scan: 'scanned',\n                    });\n                };\n                \n\n            } catch(error){\n                console.log(`Error! Scan failed to start: ${error}.`);\n            };\n        }\n    }, [setActions]);\n\n    const onReading = ({ message, serialNumber }) => {\n        setSerialNumber(serialNumber);\n        console.log(\"message: \" + message.toString())\n        console.log(\"serial: \" + serialNumber.toString())\n\n\n        for (const record of message.records) {\n            switch (record.recordType) {\n                case \"text\":\n                    const textDecoder = new TextDecoder(record.encoding);\n                    setMessage(textDecoder.decode(record.data));\n                    break;\n                case \"url\":\n                    // TODO: Read URL record with record data.\n                    break;\n                default:\n                // TODO: Handle other records with record data.\n            }\n        }\n    };\n\n    useEffect(() => {\n        scan();\n    }, [scan]);\n\n\n    return (\n        <>\n            {actions.scan === 'scanned' ?\n                <div>\n                    <p>Scanned</p>\n                </div>\n                : <Scanner status={actions.scan}></Scanner>}\n        </>\n    );\n};\n\nexport default Scan;","import nfc from './nfc.svg';\nimport './App.css';\nimport Scan from './containers/Scan';\nimport { useState } from 'react';\nimport { ActionsContext } from './contexts/context';\n\nfunction App() {\n\n  const [actions, setActions] = useState(null);\n  const {scan, write} = actions || {};\n\n  const actionsValue = {actions,setActions};\n\n  const onHandleAction = (actions) =>{\n    setActions({...actions});\n  }\n\n  return (\n      <div className=\"App\">\n        <img src={nfc} className=\"App-logo\" alt=\"logo\" />\n        <h1>NFC Tool</h1>\n        <div className=\"App-container\">\n          <button onClick={()=>onHandleAction({scan: 'scanning'})} className=\"btn\">Scan</button>\n          <button onClick={()=>onHandleAction({scan: null})} className=\"btn\">Write</button>\n        </div>\n        <p>Version Less.</p>\n        <ActionsContext.Provider value={actionsValue}>\n          {scan && <Scan/>}\n\n        </ActionsContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}